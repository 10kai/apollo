Apollo is a RuneScape emulator which aims to encourage a fundamentally-different alternative to the way in which private server development is done today. It consists of a high-performance, modular server written in Java as well as a collection of utilities for managing the data files and plugins.

Currently people download a server, read through tutorials and apply their modifications or write their own code on top of it. This will eventually be released and repated - resulting in a complete mess of server, all created from cobbled-together code.

Apollo is going to change that through its plugin system. Instead of throwing everything into one big application, Apollo consists of:

  A small 'core' application which provides features necessary for the server to operate.
  A set of plugins, and the tools to manage them (install, uninstall, publish, download, etc).
  Some additional tools and utilities for managing the data files.


This will make it much easier for everyone to develop a private server, no longer restricting it to people who can program. Instead of copying and pasting lines of code from a woodcutting tutorial, people will simply have to download and install a woodcutting plugin. There is also going to be a plugin repository and a set of tools to make the experience very much like a package manager on Linux. Plugins themselves are currently written in Ruby, although other languages could be added.

This system also means applying upadtes to the core server is very easy. Users will just have to download the new jar, overwrite the current one with the new one, and reboot their server. This also means that inexperienced users are protected from making fatal mistakes in the core.

Some of the technically significant core features include:

  Packet encoding/decoding has been split from the representations of the packets themselves. This allows the potential for encoding/decoding to go on in parallel and also allows multiple revisions to be supported. Currently 317 and 377 are both completely supported.
  Update server support (JAGGRAB, ondemand and HTTP).
  Packet handler chaining: this allows multiple plugins to be able to intercept a single packet and deal with it appropriately. For example, a quest plugin could intercept searching a bookshelf for instance, if the behaviour needed to change in certain cases.
  Parallel execution of player updating for multi-core machines.


As well as that, it has the bog standard stuff:

  Login
  Multiplayer
  Walking/running
  Rights management
  Travel back algorithm for movement
  Character design
  Full player updating
  Npcs (and full npc updating)
  Commands
  Inventory support
  Equipment support
  Action system
  Working distanced actions
  Task scheduler based on game ticks
  Saving/loading with a custom binary format
  Skill levels/experiences
  Plugin management
  Item, npc and object information reading (from the cache)